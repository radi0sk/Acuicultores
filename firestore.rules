
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users Collection
    match /users/{userId} {
      allow read: if isUserAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isUserAuthenticated() && isOwner(userId);

      // Professional Profile Subcollection
      match /professionalProfile/{profileId} {
        allow read: if isUserAuthenticated();
        allow create, update: if isOwner(userId);
      }
    }

    // Products Collection (Marketplace)
    match /products/{productId} {
      allow read: if isUserAuthenticated();
      allow create: if isUserAuthenticated() && request.resource.data.sellerId == request.auth.uid;
      allow update: if isUserAuthenticated() && isOwner(resource.data.sellerId);
      allow delete: if isUserAuthenticated() && isOwner(resource.data.sellerId);
    }
    
    // Forum Posts Collection
    match /forumPosts/{postId} {
      allow read: if isUserAuthenticated();
      allow create: if isUserAuthenticated() && request.resource.data.authorId == request.auth.uid;
      allow update: if isUserAuthenticated(); // Allows updates for likes, polls, etc.

      // Comments Subcollection for Forum
      match /comments/{commentId} {
          allow read, create: if isUserAuthenticated();
          allow update, delete: if isUserAuthenticated() && isOwner(resource.data.authorId);
      }
    }

    // Publications Collection
    match /publications/{publicationId} {
      allow read: if resource.data.status == 'published' || (isUserAuthenticated() && isOwner(resource.data.authorId));
      allow create: if isUserAuthenticated() && request.resource.data.authorId == request.auth.uid;
      allow update: if isUserAuthenticated() && isOwner(resource.data.authorId);

      // Comments Subcollection for Publications
      match /comments/{commentId} {
        allow read, create: if isUserAuthenticated();
        allow update, delete: if isUserAuthenticated() && isOwner(resource.data.authorId);
      }
    }

    // Publication Suggestions Collection
    match /publicationSuggestions/{suggestionId} {
      allow get: if isUserAuthenticated() && (isOwner(resource.data.publicationAuthorId) || isOwner(resource.data.suggesterId));
      allow list: if isUserAuthenticated() && request.query.publicationAuthorId == request.auth.uid;
      allow create: if isUserAuthenticated() && request.resource.data.suggesterId == request.auth.uid;
      allow update: if isUserAuthenticated() && isOwner(resource.data.publicationAuthorId);
    }

    // Library Contributions Collection
    match /libraryContributions/{contributionId} {
        allow read: if resource.data.status == 'approved' || (isUserAuthenticated() && request.auth.uid == 'ovPIwCma4pcnWk9RnCF4GQEhfJm2');
        allow create: if isUserAuthenticated();
        allow update: if isUserAuthenticated() && request.auth.uid == 'ovPIwCma4pcnWk9RnCF4GQEhfJm2';
    }

    // Conversations & Messages
    match /conversations/{conversationId} {
      allow read, create, update: if isUserAuthenticated() && request.auth.uid in resource.data.participantIds;

      match /messages/{messageId} {
        allow read, create: if isUserAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;
      }
    }

    // Notifications
    match /notifications/{notificationId} {
      allow read, update: if isUserAuthenticated() && isOwner(resource.data.userId);
      allow create: if isUserAuthenticated();
    }
  }
}
