
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(resource) {
      return request.auth.uid == resource.data.authorId || request.auth.uid == resource.data.sellerId || request.auth.uid == resource.data.contributorId;
    }
    
    function isParticipant() {
      return request.auth.uid in resource.data.participantIds;
    }

    match /users/{userId} {
      allow read;
      allow write: if request.auth.uid == userId;
      
      match /professionalProfile/{profileId} {
        allow read;
        allow write: if request.auth.uid == userId;
      }
    }
    
    match /libraryContributions/{contributionId} {
        allow read;
        allow create: if isUserAuthenticated();
        allow update, delete: if isOwner(resource) || resource.data.status == 'pending'; // Admin can change status
    }

    match /products/{productId} {
      allow read;
      allow create: if isUserAuthenticated();
      allow update: if isOwner(resource) || (isUserAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['saveCount', 'savedBy', 'viewCount']));
      allow delete: if isOwner(resource);
    }
    
    match /forumPosts/{postId} {
      allow read;
      allow create: if isUserAuthenticated();
      allow update: if (isOwner(resource)) || 
                       (isUserAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likesCount', 'likedBy'])) ||
                       (isUserAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['poll']));
      allow delete: if isOwner(resource);

      match /comments/{commentId} {
        allow read, write: if isUserAuthenticated();
      }
    }
    
    match /publications/{publicationId} {
      allow read;
      allow create: if isUserAuthenticated();
      allow update: if isOwner(resource) || (isUserAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likedBy']));
      allow delete: if isOwner(resource);

      match /comments/{commentId} {
        allow read, write: if isUserAuthenticated();
      }
    }

    match /publicationSuggestions/{suggestionId} {
        allow read, create: if isUserAuthenticated();
        allow update: if request.auth.uid == resource.data.publicationAuthorId || request.auth.uid == resource.data.suggesterId;
    }
    
    match /notifications/{notificationId} {
      allow read, update, delete: if request.auth.uid == resource.data.userId;
      allow create: if isUserAuthenticated();
    }
    
    match /conversations/{conversationId} {
      allow read, update: if isParticipant();
      allow create: if isUserAuthenticated() && request.auth.uid in request.resource.data.participantIds;
      
      match /messages/{messageId} {
        allow read, create: if get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds.hasAny([request.auth.uid]);
      }
    }
    
    match /{path=**}/professionalProfile/{profileId} {
      allow read;
    }
  }
}
