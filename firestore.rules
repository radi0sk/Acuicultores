rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Funciones de Ayuda ---
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny(['admin']);
    }

    // --- Colección: users ---
    match /users/{userId} {
      // Cualquiera puede leer perfiles de usuario.
      allow get: if true;
      // Los usuarios solo pueden crear su propio perfil.
      allow create: if isOwner(userId);
      // Los usuarios solo pueden actualizar su propio perfil.
      allow update: if isOwner(userId);
      // Los usuarios no pueden eliminar perfiles.
      allow delete: if false;

      // Subcolección: professionalProfile
      match /professionalProfile/{profileId} {
        // Cualquiera puede leer perfiles profesionales.
        allow get: if true;
        allow list: if true;
        // Solo el dueño del perfil puede crearlo o actualizarlo.
        allow write: if isOwner(userId);
      }
    }
    
    // Consulta de grupo para perfiles profesionales
    match /{path=**}/professionalProfile/{profileId} {
      allow list: if true;
    }


    // --- Colección: products (Marketplace) ---
    match /products/{productId} {
      // Cualquiera puede leer la lista de productos y ver detalles.
      allow read: if true;
      // Solo usuarios autenticados pueden crear productos.
      allow create: if isUserAuthenticated() && isOwner(request.resource.data.sellerId);
      // El vendedor puede actualizar su producto. Otros usuarios pueden actualizarlo solo para guardarlo.
      allow update: if isUserAuthenticated() && 
                      (isOwner(resource.data.sellerId) || 
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['saveCount', 'savedBy', 'viewCount']));
      // Solo el vendedor puede eliminar su producto.
      allow delete: if isUserAuthenticated() && isOwner(resource.data.sellerId);
    }

    // --- Colección: forumPosts (Foro) ---
    match /forumPosts/{postId} {
      // Cualquiera puede leer los posts del foro.
      allow read: if true;
      // Solo usuarios autenticados pueden crear posts.
      allow create: if isUserAuthenticated() && isOwner(request.resource.data.authorId);
      // El autor puede editar su post. Otros usuarios pueden dar like y votar.
      allow update: if isUserAuthenticated() && (
                      isOwner(resource.data.authorId) ||
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likesCount', 'likedBy']) ||
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['poll'])
                    );
      // Solo el autor o un admin pueden eliminar un post.
      allow delete: if isUserAuthenticated() && (isOwner(resource.data.authorId) || isAdmin());

      // Subcolección: comments
      match /comments/{commentId} {
        // Cualquiera puede leer comentarios.
        allow read: if true;
        // Solo usuarios autenticados pueden comentar.
        allow create: if isUserAuthenticated() && isOwner(request.resource.data.authorId);
        // El autor del comentario puede actualizarlo (en el futuro).
        allow update: if isUserAuthenticated() && isOwner(resource.data.authorId);
        // El autor del comentario o un admin pueden borrarlo.
        allow delete: if isUserAuthenticated() && (isOwner(resource.data.authorId) || isAdmin());
      }
    }

    // --- Colección: publications (Artículos) ---
    match /publications/{publicationId} {
      // Cualquiera puede leer publicaciones publicadas. Borradores solo por el autor.
      allow get: if resource.data.status == 'published' || (isUserAuthenticated() && isOwner(resource.data.authorId));
      allow list: if true; // Permitir listar para filtrar por 'published' en el cliente.
      // Solo usuarios autenticados pueden crear publicaciones/borradores.
      allow create: if isUserAuthenticated() && isOwner(request.resource.data.authorId);
      // El autor puede actualizar. Otros pueden dar like.
      allow update: if isUserAuthenticated() && 
                      (isOwner(resource.data.authorId) ||
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likedBy']));
      // Solo el autor o un admin pueden eliminar.
      allow delete: if isUserAuthenticated() && (isOwner(resource.data.authorId) || isAdmin());

      // Subcolección: comments
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isUserAuthenticated();
        allow update: if isUserAuthenticated() && isOwner(resource.data.authorId);
        allow delete: if isUserAuthenticated() && (isOwner(resource.data.authorId) || isAdmin());
      }
    }
    
    // --- Colección: publicationSuggestions (Sugerencias de cambio) ---
    match /publicationSuggestions/{suggestionId} {
        allow read, write: if isUserAuthenticated(); // Simplificado, se puede refinar.
    }

    // --- Colección: libraryContributions (Biblioteca) ---
    match /libraryContributions/{contributionId} {
        // Cualquiera puede leer documentos aprobados.
        allow get: if resource.data.status == 'approved';
        allow list: if true; // Permitir listar para filtrar por 'approved' en el cliente.
        // Admins pueden leer cualquier documento.
        allow read: if isUserAuthenticated() && isAdmin();
        // Usuarios autenticados pueden crear contribuciones.
        allow create: if isUserAuthenticated();
        // Solo un admin puede actualizar el estado (aprobar/rechazar).
        allow update: if isUserAuthenticated() && isAdmin();
        allow delete: if isUserAuthenticated() && isAdmin();
    }
    
    // --- Colección: notifications (Notificaciones) ---
    match /notifications/{notificationId} {
        // El usuario solo puede leer/actualizar/eliminar sus propias notificaciones.
        allow read, update, delete: if isUserAuthenticated() && isOwner(resource.data.userId);
        // Las notificaciones se crean en el servidor (o con reglas que validen al creador).
        allow create: if isUserAuthenticated();
    }
    
    // --- Colección: conversations (Mensajes) ---
    match /conversations/{conversationId} {
        // Solo los participantes de la conversación pueden acceder.
        allow read, delete: if isUserAuthenticated() && request.auth.uid in resource.data.participantIds;
        allow create: if isUserAuthenticated() && request.auth.uid in request.resource.data.participantIds;
        
        // Subcolección: messages
        match /messages/{messageId} {
            // Solo los participantes pueden leer y escribir mensajes.
            allow read, create: if isUserAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;
            allow update, delete: if false; // No permitir edición o borrado por ahora.
        }
    }
  }
}
