rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return request.auth.uid == 'ovPIwCma4pcnWk9RnCF4GQEhfJm2';
    }

    // Collection: users
    match /users/{userId} {
      allow read: if isUserAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);

      // Subcollection: professionalProfile
      match /professionalProfile/{profileId} {
        allow read: if isUserAuthenticated();
        allow create, update: if isOwner(userId);
      }
    }
    
    // Rule for collection group 'professionalProfile'
    match /{path=**}/professionalProfile/{profileId} {
        allow list, read: if isUserAuthenticated();
    }

    // Collection: products
    match /products/{productId} {
      allow read: if isUserAuthenticated();
      allow create: if isOwner(request.resource.data.sellerId);
      allow update, delete: if isOwner(resource.data.sellerId);

      // Allow any authenticated user to save or view a product
      allow update: if isUserAuthenticated() && 
                      request.resource.data.diff(resource.data).affectedKeys()
                      .hasAny(['saveCount', 'savedBy', 'viewCount']);
    }

    // Collection: forumPosts
    match /forumPosts/{postId} {
      allow read, list: if isUserAuthenticated();
      allow create: if isOwner(request.resource.data.authorId);
      allow update: if isUserAuthenticated(); // Simplified for likes, comments, polls
      allow delete: if isOwner(resource.data.authorId);

      // Subcollection: comments
      match /comments/{commentId} {
        allow read, list, create: if isUserAuthenticated();
        allow update, delete: if isOwner(resource.data.authorId);
      }
    }
    
    // Collection: publications
    match /publications/{publicationId} {
      allow read, list: if isUserAuthenticated();
      allow create: if isOwner(request.resource.data.authorId);
      allow update: if isOwner(resource.data.authorId) || 
                      (isUserAuthenticated() && 
                       request.resource.data.diff(resource.data).affectedKeys().hasAny(['likes', 'likedBy']));
      allow delete: if isOwner(resource.data.authorId);

      // Subcollection: comments
      match /comments/{commentId} {
        allow read, list, create: if isUserAuthenticated();
        allow update, delete: if isOwner(resource.data.authorId);
      }
    }

    // Collection: publicationSuggestions
    match /publicationSuggestions/{suggestionId} {
        allow create: if isOwner(request.resource.data.suggesterId);
        allow read: if isOwner(resource.data.suggesterId) || isOwner(resource.data.publicationAuthorId);
        allow update: if isOwner(resource.data.publicationAuthorId); // Only the original author can approve/reject
    }

    // Collection: libraryContributions
    match /libraryContributions/{contributionId} {
        allow read: if isUserAuthenticated();
        allow list: if isUserAuthenticated() || isAdmin();
        allow create: if isUserAuthenticated();
        allow update: if isAdmin();
    }
    
    // Collection: conversations
    match /conversations/{conversationId} {
      allow read, create, update: if request.auth.uid in resource.data.participantIds;
      allow list: if isUserAuthenticated() && request.auth.uid in request.query.where.participantIds;

      // Subcollection: messages
      match /messages/{messageId} {
        allow read, create: if request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;
      }
    }

    // Collection: notifications
    match /notifications/{notificationId} {
        allow read, update: if isOwner(resource.data.userId);
        allow list: if isUserAuthenticated() && request.query.where.userId == request.auth.uid;
        allow create: if isUserAuthenticated();
    }
  }
}
