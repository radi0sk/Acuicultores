
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // --- Helper Functions ---
    function isUserAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return request.auth.uid == 'ovPIwCma4pcnWk9RnCF4GQEhfJm2';
    }
    
    // --- Collection Rules ---

    // Users Collection
    match /users/{userId} {
      allow read;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || 
                      (isUserAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['followers', 'following', 'followersCount', 'followingCount']));
                      
      // Professional Profile Subcollection
      match /professionalProfile/{profileId} {
        allow read;
        allow write: if isOwner(userId);
      }
    }
    
    // Professional Profiles (for Collection Group Query)
    match /{path=**}/professionalProfile/{profileId} {
      allow read;
    }

    // Products Collection
    match /products/{productId} {
      allow read;
      allow create: if isUserAuthenticated() && request.resource.data.sellerId == request.auth.uid;
      allow update: if isOwner(resource.data.sellerId) || 
                      (isUserAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['saveCount', 'savedBy', 'viewCount']));
      allow delete: if isOwner(resource.data.sellerId);
    }
    
    // Forum Posts Collection
    match /forumPosts/{postId} {
      allow read;
      allow create: if isUserAuthenticated() && request.resource.data.authorId == request.auth.uid;
      allow update: if isOwner(resource.data.authorId) ||
                      (isUserAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likesCount', 'likedBy'])) ||
                      (isUserAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['commentsCount'])) ||
                      (isUserAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['poll']));

      allow delete: if isOwner(resource.data.authorId);
      
      // Comments Subcollection
      match /comments/{commentId} {
        allow read;
        allow create: if isUserAuthenticated();
        allow update, delete: if isOwner(resource.data.authorId);
      }
    }

    // Publications Collection
    match /publications/{publicationId} {
      allow read;
      allow create: if isUserAuthenticated() && request.resource.data.authorId == request.auth.uid;
      allow update: if isOwner(resource.data.authorId) ||
                      (isUserAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likedBy']));
      allow delete: if isOwner(resource.data.authorId);
      
      // Comments Subcollection for Publications
      match /comments/{commentId} {
        allow read;
        allow create: if isUserAuthenticated();
        allow update, delete: if isOwner(resource.data.authorId);
      }
    }
    
    // Publication Suggestions Collection
    match /publicationSuggestions/{suggestionId} {
      allow read: if isUserAuthenticated() && (isOwner(resource.data.publicationAuthorId) || isOwner(resource.data.suggesterId));
      allow create: if isUserAuthenticated() && request.resource.data.suggesterId == request.auth.uid;
      allow update: if isUserAuthenticated() && isOwner(resource.data.publicationAuthorId);
    }

    // Library Contributions Collection
    match /libraryContributions/{contributionId} {
        allow get;
        allow list: if isUserAuthenticated();
        allow create: if isUserAuthenticated();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }
    
    // Notifications Collection
    match /notifications/{notificationId} {
      allow get, update: if isOwner(resource.data.userId);
      // Allow a user to list their own notifications.
      // This relies on the client query filtering by userId.
      allow list: if isUserAuthenticated() && request.query.where.userId == request.auth.uid;
      allow create: if isUserAuthenticated();
    }
    
    // Conversations Collection
    match /conversations/{conversationId} {
      // A user can read a conversation document if they are a participant.
      allow get: if isUserAuthenticated() && request.auth.uid in resource.data.participantIds;
      
      // A user can list conversations, but only if they are querying for their own conversations.
      allow list: if isUserAuthenticated() && request.query.where.participantIds.hasAny([request.auth.uid]);

      // A user can create a conversation if they are authenticated and are one of the participants.
      allow create: if isUserAuthenticated() && request.auth.uid in request.resource.data.participantIds;

      // A user can update a conversation (e.g., lastMessage) if they are a participant.
      allow update: if isUserAuthenticated() && request.auth.uid in resource.data.participantIds;
      
      // Messages Subcollection
      match /messages/{messageId} {
        allow read, create: if isUserAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;
      }
    }
  }
}
