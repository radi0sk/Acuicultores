
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // --- Users & Profiles ---
    match /users/{userId} {
      // Anyone can read a user's public profile
      allow read: if true;
      // Only the user themselves can create or update their profile
      allow write: if isOwner(userId);

      // Professional Profile Subcollection
      match /professionalProfile/data {
        allow read: if true;
        allow write: if isOwner(userId);
      }
    }

    // --- Publications (Blog/Articles) ---
    match /publications/{publicationId} {
      // Allow read if the publication is published, or if the user is the owner (to see drafts)
      allow read: if resource.data.status == 'published' || (isAuthenticated() && isOwner(resource.data.authorId));
      // Allow create/update only for the owner
      allow write: if isAuthenticated() && isOwner(request.resource.data.authorId);

      // Comments on publications
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow update, delete: if isAuthenticated() && isOwner(resource.data.authorId);
      }
    }
    
    // --- Forum Posts ---
    match /forumPosts/{postId} {
      allow read: if true;
      allow create: if isAuthenticated();
      // Only owner can delete, anyone authenticated can update (for likes, polls)
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() && isOwner(resource.data.authorId);
      
      // Comments on forum posts
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow update, delete: if isAuthenticated() && isOwner(resource.data.authorId);
      }
    }

    // --- Marketplace Products ---
    match /products/{productId} {
      allow read: if true;
      // Allow create for any authenticated user
      allow create: if isAuthenticated();
      // Allow update/delete only for the seller
      allow update, delete: if isAuthenticated() && isOwner(resource.data.sellerId);
    }
    
    // --- Library Contributions ---
    match /libraryContributions/{contributionId} {
        // Read is allowed if the document is approved.
        allow read: if resource.data.status == 'approved';
        // Only admin can read pending/rejected, or the contributor
        allow read: if isAuthenticated() && (isOwner(resource.data.contributorId) || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles[0] == 'Admin');
        // Any authenticated user can create a contribution.
        allow create: if isAuthenticated();
        // Only an admin can approve/reject
        allow update: if isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles[0] == 'Admin';
    }

    // --- Conversations & Messages ---
    match /conversations/{conversationId} {
      // Only participants can read/write to a conversation
      allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      
      match /messages/{messageId} {
        allow read, create: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;
      }
    }

    // --- Notifications ---
    match /notifications/{notificationId} {
      // A user can only access their own notifications
      allow read, write: if isAuthenticated() && isOwner(resource.data.userId);
    }
    
    // --- Publication Suggestions ---
    match /publicationSuggestions/{suggestionId} {
        // The author of the original publication or the suggester can read it. Admin too.
        allow read: if isAuthenticated() && (isOwner(resource.data.publicationAuthorId) || isOwner(resource.data.suggesterId));
        // Any authenticated user can create a suggestion
        allow create: if isAuthenticated();
        // Only the original author can approve/reject (update status)
        allow update: if isAuthenticated() && isOwner(resource.data.publicationAuthorId);
    }
  }
}
