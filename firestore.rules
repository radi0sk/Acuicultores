rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Funciones de Ayuda ---
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles[0] == 'Admin';
    }

    // --- Colección: users ---
    match /users/{userId} {
      allow read: if isUserAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && request.resource.data.keys().hasAll(['name', 'roles', 'location', 'profileComplete']);
      
      // Subcolección de perfiles profesionales
      match /professionalProfile/{profileId} {
        allow read: if isUserAuthenticated();
        allow write: if isOwner(userId);
      }
    }

    // --- Colección: products (Marketplace) ---
    match /products/{productId} {
      allow read: if isUserAuthenticated();
      allow create: if isOwner(request.resource.data.sellerId);
      allow update: if isOwner(resource.data.sellerId) || request.resource.data.keys().hasAny(['saveCount', 'savedBy', 'viewCount']);
      allow delete: if isOwner(resource.data.sellerId);
    }
    
    // --- Colección: libraryContributions ---
    match /libraryContributions/{contributionId} {
        allow create: if isUserAuthenticated();
        allow read, list: if isUserAuthenticated();
        allow update: if isAdmin();
    }

    // --- Colección: publications ---
    match /publications/{publicationId} {
      allow read, list: if isUserAuthenticated();
      allow create: if isOwner(request.resource.data.authorId);
      allow update: if isOwner(resource.data.authorId) || (isUserAuthenticated() && request.resource.data.keys().hasAny(['likes', 'likedBy']));
      allow delete: if isOwner(resource.data.authorId);

      // Subcolección de comentarios
      match /comments/{commentId} {
        allow read, list: if isUserAuthenticated();
        allow create: if isUserAuthenticated();
      }
    }
    
     // --- Colección: forumPosts ---
    match /forumPosts/{postId} {
      allow read, list: if isUserAuthenticated();
      allow create: if isUserAuthenticated() && request.resource.data.authorId == request.auth.uid;
      allow update: if isUserAuthenticated() && (request.resource.data.keys().hasAny(['likesCount', 'likedBy', 'poll']) || isOwner(resource.data.authorId));
      allow delete: if isUserAuthenticated() && isOwner(resource.data.authorId);

      match /comments/{commentId} {
        allow read, list: if isUserAuthenticated();
        allow create: if isUserAuthenticated();
        // Solo el autor del comentario o el autor del post pueden borrarlo
        allow delete: if isUserAuthenticated() && (isOwner(resource.data.authorId) || isOwner(get(/databases/$(database)/documents/forumPosts/$(postId)).data.authorId));
      }
    }

    // --- Colección: publicationSuggestions ---
    match /publicationSuggestions/{suggestionId} {
      allow create: if isUserAuthenticated() && isOwner(request.resource.data.suggesterId);
      allow read: if isUserAuthenticated() && (isOwner(resource.data.suggesterId) || isOwner(resource.data.publicationAuthorId));
      allow update: if isUserAuthenticated() && isOwner(resource.data.publicationAuthorId); // Solo el autor original puede aprobar/rechazar
    }

    // --- Colección: conversations ---
    match /conversations/{conversationId} {
      allow read, list: if isUserAuthenticated() && request.auth.uid in resource.data.participantIds;
      allow create: if isUserAuthenticated() && request.auth.uid in request.resource.data.participantIds;
      allow update: if isUserAuthenticated() && request.auth.uid in resource.data.participantIds;

      match /messages/{messageId} {
        allow read, list, create: if isUserAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;
      }
    }

    // --- Colección: notifications ---
    match /notifications/{notificationId} {
      allow create: if isUserAuthenticated(); // Permitir que se creen notificaciones
      allow read, list, update: if isUserAuthenticated() && isOwner(resource.data.userId); // Solo el destinatario puede leer o actualizar sus notificaciones
    }
  }
}
