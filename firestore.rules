rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- UTILITY FUNCTIONS ---
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isCreatingOwnDocument() {
      return isOwner(request.resource.data.userId);
    }
    
    function isUpdatingAllowedLikes() {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likesCount', 'likedBy']);
    }

    function isUpdatingAllowedPoll() {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['poll']);
    }


    // --- USERS ---
    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);

      // --- PROFESSIONAL PROFILE (SUBCOLLECTION) ---
      match /professionalProfile/data {
        allow read: if true;
        allow create, update: if isOwner(userId);
      }
    }
    

    // --- FORUM POSTS ---
    match /forumPosts/{postId} {
      allow read: if true;
      allow create: if isOwner(request.resource.data.authorId);
      allow update: if (isOwner(resource.data.authorId)) || isUpdatingAllowedLikes() || isUpdatingAllowedPoll();

      // --- COMMENTS (SUBCOLLECTION) ---
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isUserAuthenticated();
        allow update: if isOwner(resource.data.authorId);
      }
    }


    // --- PUBLICATIONS ---
    match /publications/{publicationId} {
      allow read: if true;
      allow create: if isOwner(request.resource.data.authorId);
      allow update: if isOwner(resource.data.authorId) || isUpdatingAllowedLikes();
      
      // --- COMMENTS (SUBCOLLECTION) ---
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isUserAuthenticated();
        allow update: if isOwner(resource.data.authorId);
      }
    }
    
    // --- PUBLICATION SUGGESTIONS ---
    match /publicationSuggestions/{suggestionId} {
        allow read, update: if isUserAuthenticated() && (isOwner(resource.data.publicationAuthorId) || isOwner(resource.data.suggesterId));
        allow create: if isUserAuthenticated() && isOwner(request.resource.data.suggesterId);
    }
    

    // --- PRODUCTS ---
    match /products/{productId} {
      allow read: if true;
      allow create: if isOwner(request.resource.data.sellerId);
      // Allow owner to update. Allow any authenticated user to update ONLY viewCount or save fields.
      allow update: if isOwner(resource.data.sellerId) || 
                      (isUserAuthenticated() && (
                          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['viewCount']) ||
                          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['saveCount', 'savedBy'])
                      ));
      allow delete: if isOwner(resource.data.sellerId);
    }
    

    // --- LIBRARY CONTRIBUTIONS ---
    match /libraryContributions/{contributionId} {
        allow read: if true;
        allow create: if isOwner(request.resource.data.contributorId);
        // Only admin can approve/reject
        allow update: if request.auth.uid == 'ovPIwCma4pcnWk9RnCF4GQEhfJm2';
    }


    // --- NOTIFICATIONS ---
    match /notifications/{notificationId} {
        allow read, update: if isUserAuthenticated() && isOwner(resource.data.userId);
        allow create: if isUserAuthenticated();
    }
    

    // --- CONVERSATIONS AND MESSAGES ---
    match /conversations/{conversationId} {
      allow list: if isUserAuthenticated() && request.auth.uid in request.query.where.value;
      allow get, update: if isUserAuthenticated() && request.auth.uid in resource.data.participantIds;
      allow create: if isUserAuthenticated() && request.auth.uid in request.resource.data.participantIds;

      match /messages/{messageId} {
        allow read, create: if isUserAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;
      }
    }
  }
}
